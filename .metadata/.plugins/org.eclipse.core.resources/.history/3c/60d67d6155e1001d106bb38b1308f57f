#include "kernel.h"




int main(){

	logger = log_create("kernel.log", "Kernel-Log", 1, LOG_LEVEL_INFO);

	t_config* config = config_create("cfg/config.cfg");



	int puertoEscucha = config_get_int_value(config, "PUERTO_ESCUCHA");
	int socketkernel, socketconsola;

	struct sockaddr_in kernelsv, consolasock;
	memset(&kernelsv,0,sizeof(kernelsv));

	kernelsv.sin_family = AF_INET;
	kernelsv.sin_port = htons(puertoEscucha);

	if((socketkernel = socket(AF_INET,SOCK_STREAM,0))<0){
		log_info(logger, "Error al crear socket.");
		perror("Error al crear el socket.");
		exit(EXIT_FAILURE);
	}

	log_info(logger, "Socket creado con exito.");



	if(bind(socketkernel,(struct sockaddr *)&kernelsv, sizeof(kernelsv))<0){
		log_info(logger, "Error al bindear el socket");
		perror("Error al bindear socket.");
		exit(EXIT_FAILURE);
	}

	log_info(logger, "Socket bindeado con exito");


	pthread_t hiloMemoria, hiloFileSystem, hiloCPU, hiloConsola;

	pthread_create(&hiloMemoria, NULL, conexionMemoria, config);

	pthread_create(&hiloFileSystem, NULL, conexionFileSystem, config);

	pthread_create(&hiloCPU, NULL, conexionCPU, config);

	pthread_join(hiloMemoria, NULL);
	pthread_join(hiloFileSystem, NULL);
	pthread_join(hiloCPU, NULL);

	while(1){

		if((socketconsola = listen(socketkernel,10))<0){
				log_info(logger, "Error al escuchar desde el socket.");
				perror("Error al escuchar desde el socket.");
				exit(EXIT_FAILURE);
		}

		socketconsola = accept(socketkernel, (struct sockaddr*)&consolasock,sizeof(consolasock));

		pthread_create(&hiloConsola, NULL, handlerConsola, socketconsola);

		pthread_detach(hiloConsola);

		log_info(logger, "Hilo consola detached.");

		sleep(3);

	};



	log_destroy(logger);

}

void conexionMemoria(t_config* arg1){

	log_info(logger, "Inicializado hilo de conexion con Memoria.");

	char* ipMemoria = config_get_string_value(arg1,"IP_MEMORIA");
	int puertoMemoria = config_get_int_value(arg1, "PUERTO_MEMORIA");

	log_info(logger, "Inicializado hilo de conexion con Memoria2.");

}

void conexionFileSystem(t_config* arg1){

	log_info(logger, "Inicializado hilo de conexion con File System.");

	char* ipFileSystem = config_get_string_value(arg1,"IP_FILESYSTEM");
	int puertoFileSystem = config_get_int_value(arg1, "PUERTO_FILESYSTEM");

}

void conexionCPU(t_config* arg1){

	log_info(logger, "Inicializado hilo de conexion con CPU.");

	char* ipCPU = config_get_string_value(arg1,"IP_CPU");
	int puertoCPU = config_get_int_value(arg1, "PUERTO_CPU");

}

void handlerConsola(int sockConsola){

	log_info(logger, "Consola %d conectada", sockConsola);

	pcb* pcb = crearPcb(sockConsola);



}

pcb* crearPcb(int socket){

	pcb* pcb = malloc(sizeof(pcb));

	pcb->pid = socket;
	pcb->estado = NEW;

	return pcb;

}


